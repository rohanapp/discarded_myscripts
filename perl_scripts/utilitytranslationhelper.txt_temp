// Utility functions
// The declatation language specifies that it leverage a utility. Parser generates
// template code for such utility. The parser also generates the include directives/
// Dummy stack vars are created for all the parameters needed by utility function

//
// Category: Standard data structures, algos
//
stlalgo: algorithm {
stlv v; 
v.push_back(e);
// get num elements (size of container)
v.size();
// change num elements
v.resize(num);
// get size of allocated storage
v.capacity();
// change capacity
v.reserve(num);
v.front();
v.back();
iterator it = v.erase(itToErase);
// iteration: begin, end, rbegin, rend

// Queues
stlq q; 
q.push_back(e);
q.push_front(e);
// returns none. Removes element and invokes destructor
q.pop_back(e);
q.pop_front(e);
// return reference to front element
q.front();
q.back();

// Maps
stlm m;
}

stlviter: algorithm {
stlv container;
std::vector<type>::iterator iter;
for(iter = container.begin(); iter != contained.end(); ++iter)
  const type& elem = *iter;
}

stlmalgo: algorithm {
stlm container;
// Iteration
std::map<ktype, vtype>::iterator it;
for(it = container.begin(); it != contained.end(); ++it)
  const ktype& keyOfElem = it->first;
  const ktype& valOfElem = it->second;

// Find
std::map<ktype, vtype>::iterator it = container.find(elem);
SS_ASSERT(it != container.end());
valFound = it->second;

// Erase
container.erase(it);

// Insert element
container[kval] = eval;
container.insert(std::pair<ktype,etype>(kval,eval));

// Clear all contents
container.clear();
}

stlqiter: algorithm {
stlq container;
std::deque<type>::iterator iter;
for(iter = container.begin(); iter != contained.end(); ++iter)
  const type& elem = *iter;
}

//
// Category: NgApp, AnsoftCOM, Threading
//
initapp: ngcore/ngcore.h {
AppStartPrms prms;
prms.InitializeStartupParams(argc, argv);
// SetRegistryKey((LPCTSTR)(i18n::CStr(mRegistryKey))); Message dll REVISIT

// Initialization of ngcore and uicore has been moved ahead so that the messagemanager is ready for security code.
InitNgcoreDLL(this);
// InitUicoreDLL(this) is uicore needed? REVISIT
// m_cmdInfo.GenerateRegistryOverrideFileIfNecessary(RegistryAccess::GetTempDir())
}

initacom: AnsoftCOM/AnsoftCOMFunctions.h {
acomconfigmgr* configMgr = new AnsoftCOMConfigurationManager(this);
configMgr->Initialize(AString(argv[0]));
acomglobinit* ptr = AnsoftCOM::GetAnsoftCOMGlobalsInitializer();
ptr->SetCOMConfigurationManager(configMgr);
AnsoftCOM::CoInitialize();
}

finalizeacom: AnsoftCOM/AnsoftCOMFunctions.h {
acomconfigmgr* configMgr = sth;
delete m_AnsoftCOMConfigMgr;
m_AnsoftCOMConfigMgr = 0;
AnsoftCOM::CoFinalize();
}

createstub: AnsoftCOM/AnsoftCOMObject.h {
AnsoftCOMObject<concretestubclass>* stubObj = 0;
hresult hr = AnsoftCOMObject<ansoftcominterface>::CreateInstance(&stubObj);
if (hr != ANS_OK) ZZZ // error;
stubObj->AddRef();
}

releasestub: AnsoftCOM/AnsoftCOMObject.h {
hresult hr;
stubobj->ReleaseInstance();
stubobj = 0;
}

writeconnparams: AnsoftCOM/AnsoftCOMDefinitions.h {
block stubBlock;
stub->GetCommParamsToMarshall(stubBlock);
// Put block somewhere
}

// block name: ConnectionParameters
// Communication sub-block contains (transport type, ip, communicator id, listen port). Sub-block name: CommDetails
readconnparams: ngcore/streamio/streamio_object.h {
block stubBlock;
// Get the above block, from wherever it is persisted
GetStubBlock(stubBlock);
}

unmarshallconnparams: AnsoftCOM/AnsoftCOMFunctions.h {
IAnsoftCOMUnknown* iunknown = 0;
block stubBlock;
hresult hr = AnsoftCOM::UnMarshallBlockToInterface(&iunknown, stubBlock);
if (hr != ANS_OK) ZZZZ //error check;

// Get interface
ICustomInterface* icint = 0;
iunknown->GetInterfaceForEdit<ICustomInterface>(&icint);
SS_ASSERT(icint);
}

cocreate: AnsoftCOM/AnsoftCOMDefinitions.h {
// Include: AnsoftCOM/AnsoftCOMFunctions.h, AnsoftCOM/AnsoftCOMObject.h 
IAnsoftCOMUnknown* iunk = 0;
AnsoftCOM::CoCreateInstance(&iunk, AnsoftAuthInfo(), ID_IDESKTOPENGINEINTERFACE, ID_DESKTOPENGINEINTERFACEFACTORY,;
                            ACHAR("sjo7na1l"), ACHAR("desktopproxy"), ACHAR("1.0"));
IDesktopEngineInterface* ideskEng = dynamic_cast<IDesktopEngineInterface*>(iunk);
SS_ASSERT(ideskEng);
WBSystemLocInfo locInfo(ACHAR("D:/Program Files (x86)/Ansoft/Maxwell14.0/maxwell.exe"), ACHAR("D:/projs/maxprojs/Solenoid.mxwl"), ACHAR("1"));
WBSystemDisplayInfo dispInfo(ACHAR("wbsys"), ACHAR("wbproj"));
LaunchSystemInDesktopCmdDef desktopModelDef(locInfo, dispInfo, ACHAR("sysType"), false, false, true);
block blk;
desktopModelDef.Write(blk);
ideskEng->LaunchDesktop(blk);
}

//
// Category: Threading, Synchronization
//

tlsconstruct: ngcore/ipcutils/OSThreads.h {
// Declare key that indexes per-thread storage
pthread_key_t gThreadSpecificKey = 0;

// Define/Create key
if(pthread_key_create(&gThreadSpecificKey, NULL) != 0);
  // handle failure
}

tlsdestruct: ngcore/ipcutils/OSThreads.h {
// Destruct key. REVISIT: ensure per-thread memory indexed at this key is deleted
pthread_key_delete(gThreadSpecificKey);
gThreadSpecificKey = 0;
}

tlsaccessimpl: ngcore/ipcutils/OSThreads.h {
// To allow clients to Access per-thread specific storage, use below implementation lines
T *threadStore = reinterpret_cast<T*>(pthread_getspecific(gThreadSpecificKey));
if(threadStore);
  return threadStore;

T* threadStore = create storage;
pthread_setspecific(gThreadSpecificKey, threadStore);
return threadStore;
}

eventusage: ngcore/ipcutils/GeneralFunctions.h {
// Create event that is in non-signalled state. And requires a manual_reset
handle desktopExitedEvent = AnstCreateEvent(true, false);

// Wait on multiple events. 'Wait for all' is false below i.e. below thread will wakeup
// when any of the events is signaled
handle events[] = { event1, event2 }
int numEventsToWait = static_cast<int>(sizeof(events)/sizeof(ANSOFTHANDLE));
int waitStatus = AnstWaitForMultipleObjects(numEventsToWait, events, false, ANST_INFINITE);
SS_ASSERT(waitStatus != ANST_WAIT_FAILED);

// A thread waiting on the above non-signaled event will block until signalled using SetEvent
AnstSetEvent(hEvent);
// Once signalled, any waits will be unblocked until the event is 'reset' using below
AnstResetEvent(hEvent);

// Handle the signals
if (waitStatus == ANST_WAIT_OBJECT_0) first event is signalled;
if (waitStatus == ANST_WAIT_OBJECT_0 + 1) second event is signalled;

// Close the handle to the events
AnstCloseHandle(event1);
event1 = INVALID_HANDLE;
}

threadusage: ngcore/ipcutils/OSThreads.h {
typedef void* (threadfun(void* cbData);
threadfuncptr = some_static_function;
callbackdata = some_void*_pointer;
// REVISIT initialization
thread threadID;
pthread_create(&threadID, NULL, threadfuncptr, callbackdata);

// Cleanup after thread is done
// Use the below function to wait for thread termination. Dont cleanup handles or state used 
// in the thread until pthread_join returns. A return of 0 is success
pthread_join(threadID, 0);
}

// Get per-thread message manager
tmsgmgrget: wbintegutils/ThreadMessageManager.h {
return ThreadMessageManager::GetMessageManager();
}
tmsgmgrinit: wbintegutils/ThreadMessageManager.h {
ThreadMessageManager::InitializeThreadMessageManager(logfile);
}
tmsgmgrdest: wbintegutils/ThreadMessageManager.h {
ThreadMessageManager::DestroyThreadMessageManager();
}

//
// Category: Infrastructure
// 
addmsg: ngcore/messagelibni/MessageQueueRestorer.h {
msgmgr* msgMgr = ::GetMessageManager();
msg am;
am.SetMessageText(ACHAR(""));
msgMgr->AddAnsoftMessage(am);
msghandler hdlr;
msgqueueres rr(hdlr);
}

ansdebug: ngcore/ngutils/ans_debug.h {
::AnsDebug(ACHAR(""), 1, ACHAR("\n"));
}

assert: ngcore/ngutils/assert.hxx {
SS_ASSERT();
}

portab: ngcore/common/portab.h {
}

platform_specifics: ngcore/common/PlatformSpecifics_C++.h {
}

wintypes: ngcore/common/Win32Types.h {
}

debuglogenv: ngcore/ngutils/ans_debug.h {
AnsDebugLogAllEnvVars(1);
}

ngregistryoverride: ngcore/registry/AnsoftRegistryOverride.h, AnsoftCOM/AnsoftCOMSchedulerUtility.h {
AnsoftCOMSchedulerUtility::Instance()->SetRegistryAccessNgTempDir();
AnsoftRegistryOverride::SetRegistryOverrideFile(batchOptionsFile);
}

ngregistryaccess: ngcore/registry/RegistryAccessNg.h {
RegistryAccessNg::GetTempDir();
}

putenv: ngcore/common/PlatformSpecifics_C++.h {
// NOTE: each env requires it's own buffer! Don't reuse the same buffer for 2 diff envs
const int kMaxEnvStrBuffer = 512;
static char envstring[kMaxEnvStrBuffer] = {0}
str env_str = ACHAR("ENV_NAME=");
env_str += env_value;
strcpy(envstring, env_str.ASCII().Str());
ANSOFT_PUTENV(envstring);
}

getenv: ngcore/stringutils/astring.h {
static const AChar* envVar = i18n::ACharGetEnv(ACHAR("YOUR_ENV"));
}

//
// Category: Platform specifics
//
procaddrfromdll: ngcore/ipcutils/GeneralFunctions.h {
anshandleinst libHandle = NULL;
str libnamewExt = given-lib-name;
// Unix systems follow a different naming convention for shared libraries and
// hence more attributes to the name for Unix alone
#if defined(SUN_ANSOFT) || defined(LINUX_ANSOFT);
  #ifdef BUILD64;
    libnamewExt = AString("lib") + libnamewExt + AString("_64.so");
  #else;
    libnamewExt = AString("lib") + libnamewExt + AString(".so");
  #endif;
#endif;

libHandle = AnstLoadDll(libnamewExt.ASCII().Str());
if (libHandle) success;

// Get proc address as below
void* facInterface = NULL;
ANSOFTFARPROC pfn = AnstGetProc(libHandle, "name of the function");
if (pfn) success;
}

//
// Category: OS processes
//
//
signalutils: ngcore/ipcutils/GeneralFunctions.h {

// Signal handler function on LINUX
// Need include: #include <signal.h>
void (*SIGTERM_Handler_Function) (int signum) sighandler;
// Signals that can handled:
// Exit code of a signalled process: 129 to beyond.
// Exit code is: signal code + 128. For e.g. signal 6
// implies a exit code of 134
// SIGTERM (15, exit code = 143), SIGPIPE (13, 141) => termination signal
// SIGINT (2, interrupt from keyboard), SIGABRT (something bad happened. Handler called
// just to cleanup), SIGSEGV (invalid memory reference)
// Signals that will just kill the process and no handler is invoked: SIGKILL, SIGSTOP
// Registers the handler with the signal SIGTERM
// REVISIT: see GeneralFunctions.cpp for LINUX specific system includes
#ifndef PC_ANSOFT;
/*struct sigaction;
        void     (*sa_handler)(int);
        void     (*sa_sigaction)(int, siginfo_t *, void *);
        sigset_t   sa_mask;
        int        sa_flags;
        void     (*sa_restorer)(void);
*/;
int sigaction (int signum, const struct sigaction *act, struct sigaction *oldact);
#endif;
}

getsystemerror: ngcore/ipcutils/GeneralFunctions.h {
{
str errorStr;
#ifdef PC_ANSOFT;
  const unsigned int kMaxSize = 200;
  TCHAR szBuff[kMaxSize]; 
  memset(szBuff, 0, kMaxSize);
  ::FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_MAX_WIDTH_MASK, ;
                  NULL, ;
                  errNum,;
                  0, ;
                  szBuff, ;
                  kMaxSize, ;
                  NULL);

  errorStr = szBuff;
#else;
  // this needs testing on linux
  errorStr = ::strerror(errNum);
#endif;
}

sleep: ngcore/common/PlatformSpecifics_C++.h {
ANSOFT_SLEEP(checkFileInterval in milliseconds);
}

createprocess: ngcore/ipcutils/GeneralFunctions.h {
const int numCmdLinesMax = num;
AString procCmdLine[numCmdLinesMax];

int currCmdLineNum = 0;
// Make sure to enclose file path in quotes so they can contain spaces
procCmdLine[currCmdLineNum++] = procExePath;
procCmdLine[currCmdLineNum++] = ACHAR("\"") + some_path + ACHAR("\"");
procCmdLine[currCmdLineNum++] = ACHAR("-flag");
...;
SS_ASSERT(numCmdLinesMax >= currCmdLineNum);

// Set working directory
AString workDir = GetWorkingDir;
handle procHandle // handle to the proc is returned in this;
int procStatus = AnstCreateProcess2(ACHAR(""), procCmdLine, currCmdLineNum, procHandle, false /* inherit handles */, workDir, ...);
msgmgr* mgr = ::GetMessageManager();
if (procStatus != 0) this is an error ;
// system error message
str systemErrStr;
::GetErrorStringErrorNum(systemErrStr, procStatus) // use from desktopproxy exe;

// Some sleep code
ANSOFT_SLEEP(checkFileInterval in milliseconds);

// Code that waits for process to exit
int processExitCode = ANST_STILL_ACTIVE;
AnstGetProcessExitCode(procHandle, processExitCode);
if (processExitCode != ANST_STILL_ACTIVE) this branch means that the process has died or doesnt exist on this machine;

// Close handle
AnstCloseHandle(procHandle);
procHandle = INVALID_HANDLE;
}

processutils: ngcore/ipcutils/GeneralFunctions.h {
// Handle to current pocess
handle myhnd = AnstGetCurrentProcess();

// Kill process tree
int pid = connParams.GetDesktopProcessID();
// NOTE: on LINUX, procID and prochandle are the same
handle deskHandle = AnstGetProcess(pid);
AnstTerminateProcessTree(deskHandle);

// Exit code of a process
AnstGetProcessExitCode(ANSOFTHANDLE procHandle,int &processExitCode);

}

// Category: File system, I/O
//
fileexists: ngcore/ngutils/LongFilenameOperations.h {
lfn lfn(f1);
bool exists = (LFN_Exists(lfn) && !LFN_IsExistingDirectory(lfn));
}

direxists: ngcore/ngutils/LongFilenameOperations.h {
lfn lfn(f1);
bool exists = (LFN_Exists(lfn) && LFN_IsExistingDirectory(lfn));
}

dirwritable: ngcore/ipcutils/GeneralFunctions.h {
bool ret = AnstIsDirectoryWriteable(dirPath);
}

removefile: ngcore/ngutils/LongFilenameOperations.h {
lfn filelfn;
Get(filelfn) // populate filelfn;
if (LFN_DeleteFile(filelfn) == false) error handling;
}

removedir: ngcore/ngutils/LongFilenameOperations.h {
lfn dirlfn;
Get(dirlfn) // populate filelfn;
// Be careful when deleting directories!!! Instances of code
// deleting enitre installations, OS exists!
if (LFN_Delete(dirlfn) == false) error handling;
}

fileoperationsavail: ngcore/ngutils/LongFilenameOperations.h {
// Listing of all available file, dir operations!
LFN_IsDirectory // checks just the semantics of the string??;
LFN_IsExistingDirectory // checks if dir actually exists on the disk;

LFN_CreateDirectory // might not create parent directory;
LFN_CreateDirectoryAndParents;
LFN_DeleteDirectoryContents // delete only contents of dir;
LFN_CopyDirectoryContents;

LFN_MakeFileWritable;
LFN_Move;
LFN_Rename;
LFN_Copy;

LFN_GetSize // return file size in bytes;
LFN_GetDirectorySize;
LFN_GetSizeLarge // returns double precision value;
LFN_GetDirectorySizeLarge;

LFN_GetFreeSpaceLarge // for the entire volume;

LFN_GetCreationTime // works for file or dir;
LFN_GetLastAccessTime // works for file or dir;
LFN_GetLastWriteTime // works for file or dir;

LFN_Which;
}

gettempfile: ngcore/ipcutils/GeneralFunctions.h {
str tempfile;
bool ret = AnstGetTempFileName(tempfile, destinationDir, extension string (optional), prefix string options);
}

readfile: ngcore/ngutils/LongFileName.h {
lfn lfn;
token_istream inStream(lfn);
// get the name of the outermost block in the file
str blockName;
blockptr blockPtr(blockName);
inStream >> *blockPtr;
if (blockPtr->Found() == false) ZZZZ // error;

// Read block into your streamio object
// Note: GetItemName of below streamio obj should match the blockName
readerror err = streamioobj.Read(*blockPtr);
if (err != io::kNoError) ZZZZ // handle error;
}

writefile: ngcore/streamio/data_exchange.h {
token_ostream out(m_filePathName);
block blk(blockName);
if (out.fail()) ZZZ // handle error;
out.Format(false);
out.Close();
out << io::NewLine;
}

readobjfromblock: ngcore/streamio/errorConstants.h {
// NOTE: make sure that the GetItemName of below streamio returns the name of block
strio_block_obj sobj = <get the streamio block obj that should be saved to block>;
block myBlock(strio_block_obj.GetItemName());
if (sobj.DoDataExchange(myBlock, true) == io::kNoError) success;
msgmgr* mgr = ::GetMessageManager();
lfn lockFileLfn;
GetLockFilePath(lockFileLfn);
token_istream lockFileInStream(lockFileLfn);
str itemName = connParams.GetItemName();
blockptr lockBlockPtr(itemName);
lockFileInStream >> *lockBlockPtr;
if (lockBlockPtr->Found() == false) handle error;
// if block is found, use below 
readerror err = connParams.Read(*lockBlockPtr);
if (err != io::kNoError) error now during the read;
}

writeobjtoblock: ngcore/streamio/errorConstants.h {
strio_block_obj = <get the streamio block obj that should be saved to block>;
block my Block = <block to which streamio obj is packed>;
block myBlock(strio_block_obj.GetItemName());
if (strio_block_obj.Write(myBlock) == true) // success;
}

streamio_general: ngcore/streamio/data_exchange.h {
io::CDelimiter_grammar grammar(ACHAR("()=[]"));
token_istream in(m_filePathName, grammar);
in >> io::EatToken >> nInputNum;
in.SkipToKeyword(kNumInput);
blockptr blockPtr(blockName);
inStream >> *blockPtr;
if (blockPtr->Found() == false) ZZZZ // error;

token_ostream out(m_filePathName);
if (out.fail()) ZZZ // handle error;
out.Format(false);
out.Close();
out << io::NewLine;
}

objdataexchange: ngcore/streamio/data_exchange.h {
// Concrete streamio_block object: make sure to implement virtual AString GetItemName
creaderror err;
err += io::DoDataExchange(block, do_read, kKeepOriginalsStr, m_keepOriginals);
err += io::DoDataExchange(block, do_read, kBlankPartIDStr, m_blankPartID);
err += io::DoDataExchangeVec(block, do_read, kEdgeListStr, m_vSelectedEdgeIDs);

block cmdOptionsBlock(ACHAR("CommandLine"));
cmdOptions_istream >> cmdOptionsBlock;

// Writing of block func
blockfunc func(kEdgeListStr);
std::vector<id::BasicID>::const_iterator iter;
for (iter = m_vSelectedEdgeIDs.begin();iter != m_vSelectedEdgeIDs.end();++iter)
   func << *iter;
block << func;

// Reading of block func
blockfunc func(kEdgeListStr);
block >> func;
if (!block.Found()) ZZZ //sth;
err = io::kNotFound;
io::CBlock_func::const_list_iterator func_iter = func.begin();
while (func_iter != func.end());
if (!func.QueryUnamedValues(func_iter,edgeID)) ;

RecordError(err);
return err;
}


