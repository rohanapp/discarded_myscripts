CodeType: Class

class INgAppCommandProvider : none {

public:

ClassMethods {
// One provider can support multiple commands. So return all commands for which you have the algorithms.
virtual void GetSupportedNgCommands(strvec& cmdUniqueNames) const = 0 {}

// For the given command, parse the command line parameters. The cmdline parsed by the framework
// is supplied in the cmdLine argument.
// The subset of the command-line option that are not interpreted by NgApp are passed as argc/argv. So
// it is an error if there are unidentified arguments or if arguments are invalid
// Output on success: block representing command line
virtual bool ParseCommandLineOptions(block& cmdParams, IGeneralOptionSetter* setGenOptions, const str& cmdName, int argc, char** argv, const ngappcmdline& generalOptions) = 0 {}

// At this stage, NgApp is done parsing command lines. 
// NgApp and command provider setup environment and do any other preparation to kickoff the job
// NOTE: objective is to kickoff the job quickly (so the distributed compute resources get utilized sooner than later)
// and so perform only activities that must be done before distributed resources can be utilized
// Time spent here is logged
// cmdDef is needed to find out the distribution level. Such info is needed as preparation is different at
// different levels
virtual bool PrepareCommandExecutionEnv(const ngcmddef& cmdDef, const block& cmdParams, const ngappcmdline& generalOptions) = 0 {}

// Now run the command using the information collected from command-line options, etc.
virtual bool RunNgCommand(ingcmdcallback* icmdCB) = 0 {}
}

}
